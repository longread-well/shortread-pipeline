configfile: "config.yaml"

CENTRES_TECHNOLOGIES_DONORS_INDEX = []
for tech in config["SAMPLES"]:
  for centre in config["SAMPLES"][tech]:
    for donor in config["SAMPLES"][tech][centre]:
      for index in config["SAMPLES"][tech][centre][donor]:
        CENTRES_TECHNOLOGIES_DONORS_INDEX.append(f"{centre}_{tech}_{donor}_{index}")
# Creates a list like the following: ['whg_coolmps_HV31_IDX1', 'whg_coolmps_NA12878_IDX1',
#                              'nygc_illumina_NA12878_IDX1',
#                              'whg_illumina_NA12878_NE725538', 'whg_illumina_NA12878_NE755566',
#                              'whg_illumina_NA12878_NE760511', 'whg_illumina_NA12878_NE796507']

localrules: all, multiqc

rule all:
     input:
        multiqc = "results/multiqc/raw_multiqc_report.html"
        
rule multiqc:
     input: expand("results/fqc/{ctdi}_{R}_fastqc.zip", ctdi=CENTRES_TECHNOLOGIES_DONORS_INDEX, R=["R1", "R2"])
     output:
        htmlreport = "results/multiqc/raw_multiqc_report.html",
        zipdata = "results/multiqc/raw_multiqc_report_data.zip",
        files = "results/multiqc/raw.txt"
     threads: 1
     params:
        outputdir = "results/multiqc/",
        title = "raw"
     conda: "envs/conda.yaml"
     shell:
           """
           export LC_ALL=en_GB.utf8
           echo {input} | tr " " "\n" > {output.files}
           multiqc -f -z -i {params.title} -o {params.outputdir} --file-list {output.files}
           """

rule fqc:
    input:
        fq1 = "mergelanes/{centre}_{tech}_{donor}_{index}_R1.fq.gz",
        fq2 = "mergelanes/{centre}_{tech}_{donor}_{index}_R2.fq.gz",
        adapters = "reference/adapter_sequences/adapters.tsv"
    output:
        html1 = "results/fqc/{centre}_{tech}_{donor}_{index}_R1_fastqc.html",
        zip1 = "results/fqc/{centre}_{tech}_{donor}_{index}_R1_fastqc.zip",
        html2 = "results/fqc/{centre}_{tech}_{donor}_{index}_R2_fastqc.html",
        zip2 = "results/fqc/{centre}_{tech}_{donor}_{index}_R2_fastqc.zip"
    threads: 1
    params: outputdir = "results/fqc/"
    conda: "envs/conda.yaml"
    shell: "fastqc -q -a {input.adapters} -o {params.outputdir} {input.fq1} {input.fq2}"

def input_mergelanes(wc):
   # This will return a named dict as input for the next rule
   lane_dict = config["SAMPLES"][wc.tech][wc.centre][wc.donor][wc.index]
   fq1s = [lane_dict[lane][0] for lane in lane_dict.keys()] # Read 1 of paired-end reads
   fq2s = [lane_dict[lane][1] for lane in lane_dict.keys()] # Read 2 of paired-end reads
   inputs = { "fq1s" : fq1s,  
              "fq2s" : fq2s}
   return(inputs)
rule mergelanes:
    input: unpack(input_mergelanes)
    output:
        fq1 = "mergelanes/{centre}_{tech}_{donor}_{index}_R1.fq.gz",
        fq2 = "mergelanes/{centre}_{tech}_{donor}_{index}_R2.fq.gz"
    threads: 1
    conda: "envs/conda.yaml"
    shell:
           """
           cat {input.fq1s} > {output.fq1}
	   cat {input.fq2s} > {output.fq2}
           """

rule trimLength:
    input:
        fq1 = "data/illumina/nygc/ERR3239334_1.fastq.gz",
        fq2 = "data/illumina/nygc/ERR3239334_2.fastq.gz"
    output:
        fq1 = "data/illumina/nygc/ERR3239334_{length}bp_1.fastq.gz",
        fq2 = "data/illumina/nygc/ERR3239334_{length}bp_2.fastq.gz"
    threads: 2
    params: length='{length}'
    shell:
        """
        zcat {input.fq1} | awk -v L={params.length} 'NR % 4 == 1 || NR % 4 == 3 {{print}} NR % 4 == 2 || NR % 4 == 0 {{print substr($0,1,L)}}' | pigz -p {threads} -4 -c > {output.fq1}
        zcat {input.fq2} | awk -v L={params.length} 'NR % 4 == 1 || NR % 4 == 3 {{print}} NR % 4 == 2 || NR % 4 == 0 {{print substr($0,1,L)}}' | pigz -p {threads} -4 -c > {output.fq2}
        """
